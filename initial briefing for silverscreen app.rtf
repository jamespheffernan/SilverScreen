{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 .SFNS-Semibold;\f4\fnil\fcharset0 .SFNS-Regular;\f5\fnil\fcharset0 HelveticaNeue-Bold;
\f6\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;\f7\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;\red14\green14\blue14;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;\cssrgb\c6700\c6700\c6700;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid501\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww11820\viewh8700\viewkind0
\deftab720
\pard\pardeftab720\sa321\partightenfactor0

\f0\b\fs48 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Project Brief \'97 MVP Build: Collaborative Movie Booking (US/UK, mobile-first)\
\pard\pardeftab720\sa298\partightenfactor0

\fs36 \cf0 0) Objective (MVP-1)\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 Ship a 
\f0\b working mobile MVP
\f1\b0  that lets a host:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 pick a movie + screening (limited to 
\f0\b one chain in one city
\f1\b0 ),\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 view 
\f0\b live seat availability
\f1\b0 ,\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 select seats for the group,\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 pay with a single card
\f1\b0  (test mode),\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 receive a confirmation payload (order id / placeholder ticket).\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Out of scope (MVP-1):
\f1\b0  true split-pay at checkout, multi-chain coverage, loyalty, chat, calendar sync.\

\f0\b Definition of Done
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8805 5 successful end-to-end bookings by test users (internal/beta), from browse \u8594  seat map \u8594  pay \u8594  confirmation.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 90%+ successful seat-map loads for supported shows.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8804 2 min median time from show selection to purchase confirmation.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Crash-free sessions \uc0\u8805 99% in beta cohort (Crashlytics).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 1) Constraints & Guardrails\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls3\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Data access:
\f1\b0  scraping 
\f0\b only
\f1\b0  for a single chain & city; low volume; exponential backoff, caching; respect robots.txt if present; cease on block.\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Payments:
\f1\b0  Stripe test mode (SAQ-A scope). No card data on our servers.\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Compliance:
\f1\b0  UK SCA flows supported (wallets later). No money transmission (single-buyer only).\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Time:
\f1\b0  1 week build with AI-assist.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 2) High-level Architecture\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 [React Native App (Expo)]\
    \uc0\u9500 \u9472  BrowseShows \u8594  SeatMap \u8594  Checkout \u8594  Confirmation\
    \uc0\u9492 \u9472  REST/JSON to API\
\
[API Gateway (Fastify/Node)]\
    \uc0\u9500 \u9472  GET /shows?city=...&date=...\
    \uc0\u9500 \u9472  GET /shows/:id/seatmap\
    \uc0\u9500 \u9472  POST /checkout (creates Stripe PI)\
    \uc0\u9492 \u9472  POST /confirm (triggers purchase automation)\
\
[Scraper/Automation Service (Playwright)]\
    \uc0\u9500 \u9472  scrapeShows(city,date)  -> normalized Show[]\
    \uc0\u9500 \u9472  fetchSeatMap(showId)    -> SeatMap JSON\
    \uc0\u9492 \u9472  performPurchase(order)  -> Confirmation\
\
[Queue (BullMQ + Redis)]\
    \uc0\u9500 \u9472  seatmap:fetch\
    \uc0\u9492 \u9472  purchase:execute\
\
[DB (Postgres via Prisma)]\
    \uc0\u9500 \u9472  shows, venues, screenings, seatmaps (cache)\
    \uc0\u9492 \u9472  orders, payments, audit\
\
[Telemetry]\
    \uc0\u9500 \u9472  Sentry/Crashlytics (app)\
    \uc0\u9492 \u9472  pino logs + OpenTelemetry (API)\
\pard\pardeftab720\partightenfactor0

\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 3) Data Model (TypeScript)\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 // core\
type Money = \{ currency: 'USD'|'GBP', amount: number \} // cents/pence\
type SeatStatus = 'free'|'held'|'sold';\
\
interface Venue \{ id: string; name: string; address: string; chain: 'CHAIN_X'; \}\
interface Show \{\
  id: string; venueId: string; movie: string; rating?: string;\
  startAt: string; // ISO\
  runtimeMin?: number;\
  pricing: \{ adult: Money; child?: Money; \} // simplified\
  upstream: \{ url: string; externalId: string; \}\
\}\
\
interface Seat \{ row: string; col: number; area?: string; status: SeatStatus; price: Money; code: string; \}\
interface SeatMap \{ showId: string; rows: number; cols: number; seats: Seat[]; updatedAt: string; \}\
\
// orders\
interface Order \{\
  id: string;\
  showId: string;\
  seats: string[]; // Seat.code[]\
  total: Money;\
  state: 'initiated'|'paid'|'purchased'|'failed';\
  customer: \{ email: string \};\
  paymentIntentId?: string;\
  confirmation?: \{ externalOrderId: string; qrUrls?: string[]; \};\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 4) API Surface (MVP-1)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\f2\b0\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 GET /shows?city=NYC&date=2025-08-14
\f1\fs24  \uc0\u8594  
\f2\fs26 Show[]
\f1\fs24  (cached \uc0\u8804  15 min)\
\ls4\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 GET /shows/:id/seatmap
\f1\fs24  \uc0\u8594  
\f2\fs26 SeatMap
\f1\fs24  (fresh \uc0\u8804  60 sec; stale-while-revalidate)\
\ls4\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 POST /checkout
\f1\fs24  body 
\f2\fs26 \{ orderDraft: \{ showId, seats, email \} \}
\f1\fs24 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Returns 
\f2\fs26 \{ clientSecret, orderId, amount, currency \}
\f1\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 POST /confirm
\f1\fs24  body 
\f2\fs26 \{ orderId \}
\f1\fs24 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Server verifies Stripe payment success, enqueues 
\f2\fs26 purchase:execute
\f1\fs24 , returns 
\f2\fs26 \{ status:'queued' \}
\f1\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Webhook: 
\f2\fs26 /webhooks/stripe
\f1\fs24  to capture payment events.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 5) Core Flows\
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 5.1 Browse \uc0\u8594  Seat Map\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls5\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 App calls 
\f2\fs26 /shows
\f1\fs24 .\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 User selects showtime \uc0\u8594  app calls 
\f2\fs26 /shows/:id/seatmap
\f1\fs24 .\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Host taps seats \uc0\u8594  app keeps local selection.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 5.2 Checkout (single-buyer)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls6\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 App 
\f2\fs26 POST /checkout
\f1\fs24  \uc0\u8594  Stripe PaymentIntent (PI) created on server with amount computed from seats.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 App confirms PI (Stripe RN SDK).\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On 
\f2\fs26 succeeded
\f1\fs24 , app 
\f2\fs26 POST /confirm
\f1\fs24 .\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Worker runs 
\f0\b performPurchase
\f1\b0  via Playwright against target chain site using upstream url & seat codes.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On success, persist 
\f2\fs26 confirmation
\f1\fs24 , push to client.\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Fallback:
\f1\b0  if purchase automation fails, 
\f0\b auto-refund
\f1\b0  PI and surface a clear error.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 6) Repo Layout\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 /app      # React Native (Expo)\
  /src\
    /screens (Browse, SeatMap, Checkout, Confirm)\
    /components (SeatGrid.tsx, Money.tsx)\
    /api/client.ts\
/server   # Fastify + Prisma + BullMQ + Playwright\
  /src\
    /api (routes)\
    /lib (normalize, pricing, validators)\
    /jobs (seatmap.ts, purchase.ts)\
    /scrapers/chainX (shows.ts, seatmap.ts, purchase.ts)\
    /db (prisma schema)\
/infra    # docker-compose (postgres, redis)\
\pard\pardeftab720\partightenfactor0

\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 7) Environment & Secrets\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls7\ilvl0
\f2\b0\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 POSTGRES_URL=...
\f1\fs24 \
\ls7\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 REDIS_URL=...
\f1\fs24 \
\ls7\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 STRIPE_SECRET_KEY=...
\f1\fs24  (test)\
\ls7\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 STRIPE_WEBHOOK_SECRET=...
\f1\fs24 \
\ls7\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TARGET_CHAIN="CHAIN_X"
\f1\fs24 \
\ls7\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TARGET_CITY="NYC"
\f1\fs24 \
\ls7\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 SCRAPER_USER_AGENT="..."
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 8) Sample Code (minimal, illustrative)\
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 8.1 Playwright: fetch shows (Node/TS)\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 // server/src/scrapers/chainX/shows.ts\
import \{ chromium \} from 'playwright';\
\
export async function scrapeShows(city: string, dateISO: string) \{\
  const browser = await chromium.launch(\{ headless: true \});\
  const ctx = await browser.newContext(\{ userAgent: process.env.SCRAPER_USER_AGENT \});\
  const page = await ctx.newPage();\
  const url = `https://example-chain.com/$\{city\}/showtimes?date=$\{dateISO\}`;\
  await page.goto(url, \{ waitUntil: 'networkidle' \});\
\
  // Example: shows listed as data-json on the page\
  const shows = await page.evaluate(() => \{\
    const data = (document.querySelector('#__SHOWS__') as HTMLElement)?.dataset.json;\
    if (!data) return [];\
    const raw = JSON.parse(data);\
    return raw.map((r:any) => (\{\
      id: r.id, venueId: r.venueId, movie: r.title,\
      startAt: r.startTime, upstream: \{ url: r.url, externalId: r.extId \},\
      pricing: \{ adult: \{ currency: r.currency, amount: Math.round(r.price * 100) \} \}\
    \}));\
  \});\
\
  await browser.close();\
  return shows;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 8.2 Playwright: seat map (network sniff)\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 // server/src/scrapers/chainX/seatmap.ts\
import \{ chromium \} from 'playwright';\
\
export async function fetchSeatMap(upstreamUrl: string) \{\
  const browser = await chromium.launch(\{ headless: true \});\
  const page = await browser.newPage();\
  let seatJson:any = null;\
\
  page.on('response', async (res) => \{\
    const reqUrl = res.url();\
    if (reqUrl.includes('/api/seatmap')) \{\
      try \{ seatJson = await res.json(); \} catch \{\}\
    \}\
  \});\
\
  await page.goto(upstreamUrl, \{ waitUntil: 'networkidle' \});\
  // If the site loads seat map after a click:\
  await page.click('text=Select seats', \{ timeout: 5000 \}).catch(() => \{\});\
  await page.waitForTimeout(1500);\
\
  if (!seatJson) throw new Error('Seat map not captured');\
  // normalize\
  const seats = seatJson.seats.map((s:any) => (\{\
    row: s.rowLabel, col: s.col, code: s.code,\
    status: s.available ? 'free' : 'sold',\
    price: \{ currency: seatJson.currency, amount: Math.round(s.price*100) \}\
  \}));\
  return \{ rows: seatJson.rows, cols: seatJson.cols, seats \};\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 8.3 Fastify routes (checkout + confirm)\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 // server/src/api/checkout.ts\
import Stripe from 'stripe'; import \{ prisma \} from '../db';\
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, \{ apiVersion: '2024-06-20' \});\
\
export default async function routes(fastify:any) \{\
  fastify.post('/checkout', async (req:any) => \{\
    const \{ orderDraft \} = req.body;\
    // price from DB (never trust client)\
    const show = await prisma.show.findUnique(\{ where: \{ id: orderDraft.showId \} \});\
    const seats = await prisma.seatMapSeats.findMany(\{ where: \{ showId: show!.id, code: \{ in: orderDraft.seats \} \} \});\
    const amount = seats.reduce((acc,s)=> acc + s.priceAmount, 0);\
\
    const order = await prisma.order.create(\{\
      data: \{ showId: show!.id, seats: orderDraft.seats, totalAmount: amount, currency: show!.currency, state: 'initiated', customerEmail: orderDraft.email \}\
    \});\
\
    const pi = await stripe.paymentIntents.create(\{\
      amount, currency: show!.currency.toLowerCase(),\
      automatic_payment_methods: \{ enabled: true \},\
      metadata: \{ orderId: order.id \}\
    \});\
\
    await prisma.order.update(\{ where: \{ id: order.id \}, data: \{ paymentIntentId: pi.id \} \});\
    return \{ clientSecret: pi.client_secret, orderId: order.id, amount, currency: show!.currency \};\
  \});\
\
  fastify.post('/confirm', async (req:any) => \{\
    const \{ orderId \} = req.body;\
    const order = await prisma.order.findUnique(\{ where: \{ id: orderId \} \});\
    // enqueue purchase job\
    await fastify.bull.purchase.add('purchase', \{ orderId \});\
    return \{ status: 'queued' \};\
  \});\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 8.4 React Native seat grid (simple)\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 // app/src/components/SeatGrid.tsx\
import React from 'react'; import \{ View, Pressable, Text, StyleSheet \} from 'react-native';\
\
export function SeatGrid(\{ seatmap, selected, onToggle \}:\{\
  seatmap: \{ rows:number; cols:number; seats: \{row:string; col:number; code:string; status:'free'|'sold'\}[] \};\
  selected: Set<string>; onToggle: (code:string)=>void;\
\}) \{\
  const byPos = new Map(seatmap.seats.map(s=> [`$\{s.row\}-$\{s.col\}`, s]));\
  const rowLabels = Array.from(new Set(seatmap.seats.map(s=> s.row)));\
  return (\
    <View style=\{styles.wrap\}>\
      \{rowLabels.map(r => (\
        <View key=\{r\} style=\{styles.row\}>\
          \{Array.from(\{length: seatmap.cols\}).map((_,i) => \{\
            const s = byPos.get(`$\{r\}-$\{i+1\}`);\
            if (!s) return <View key=\{i\} style=\{[styles.seat, styles.blank]\} />;\
            const isSel = selected.has(s.code);\
            const style = [styles.seat, s.status==='sold'?styles.sold: (isSel?styles.sel:styles.free)];\
            return (\
              <Pressable key=\{i\} style=\{style\} disabled=\{s.status!=='free'\} onPress=\{()=> onToggle(s.code)\}>\
                <Text style=\{styles.tiny\}>\{i+1\}</Text>\
              </Pressable>\
            );\
          \})\}\
        </View>\
      ))\}\
    </View>\
  );\
\}\
const styles = StyleSheet.create(\{\
  wrap:\{ gap:8 \}, row:\{ flexDirection:'row', gap:6, justifyContent:'center' \},\
  seat:\{ width:24, height:24, borderRadius:4, alignItems:'center', justifyContent:'center' \},\
  free:\{ borderWidth:1, borderColor:'#999' \}, sold:\{ backgroundColor:'#ccc' \}, sel:\{ borderWidth:2, borderColor:'#333' \},\
  blank:\{ opacity:0 \}, tiny:\{ fontSize:8 \}\
\});\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 8.5 Stripe (RN) checkout\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 // app/src/screens/Checkout.tsx\
import \{ useEffect, useState \} from 'react';\
import \{ useStripe \} from '@stripe/stripe-react-native';\
import \{ api \} from '../api/client';\
\
export default function Checkout(\{ route, navigation \}: any) \{\
  const \{ confirmPayment \} = useStripe();\
  const [clientSecret, setClientSecret] = useSt\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f3\b\fs34 \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 9) Seat Map Normalization Rules
\f4\b0\fs28 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Use 
\f5\b logical seat code
\f4\b0  (e.g., \'93E-12\'94) as the stable id.\
	\'95	Normalize dynamic pricing to 
\f5\b Money
\f4\b0 ; if per-seat varies, store per seat.\
	\'95	Represent aisles as 
\f5\b missing seats
\f4\b0  (no Seat entry).\
	\'95	Map statuses: vendor.available\uc0\u8594 
\f6 free
\f4 , vendor.unavailable\uc0\u8594 
\f6 sold
\f4 , vendor.hold\uc0\u8594 
\f6 held
\f4 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\fs24 \cf0 \
\uc0\u11835 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs28 \cf4 \

\f3\b\fs34 10) Pricing & Totals (server-side only)
\f4\b0\fs28 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Always compute totals on server from canonical seat prices.\
	\'95	Add 
\f5\b booking fee = 0
\f4\b0  in MVP-1 (introduce later).\
	\'95	Include taxes only if vendor separates (usually included).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\fs24 \cf0 \
\uc0\u11835 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs28 \cf4 \

\f3\b\fs34 11) Testing Plan
\f4\b0\fs28 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Unit
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Show parsing: diverse HTML samples \uc0\u8594  normalized 
\f6 Show[]
\f4 .\
	\'95	Seat map: network fixture \uc0\u8594  
\f6 SeatMap
\f4  correctness (rows/cols/seats).\
	\'95	Price calc: seat arrays \uc0\u8594  amount.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Integration
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	
\f6 /shows
\f4  \uc0\u8594  seeded DB cache fallback when scraper offline.\
	\'95	Stripe webhook \uc0\u8594  order state transitions.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 E2E (headless)
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Simulate: list shows \uc0\u8594  seat map \u8594  checkout (Stripe test card 
\f6 4242\'85
\f4 ) \uc0\u8594  confirm \u8594  mock purchase returns order id.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Fixtures
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Save raw HTML/JSON from target site for deterministic tests (
\f6 /server/fixtures/chainX/*
\f4 ).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\fs24 \cf0 \
\uc0\u11835 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs28 \cf4 \

\f3\b\fs34 12) Observability & Ops
\f4\b0\fs28 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	
\f5\b Logs:
\f4\b0  pino (server), link request id across API/scraper jobs.\
	\'95	
\f5\b Metrics:
\f4\b0  count show fetches, seatmap hits, purchase attempts/success/fail.\
	\'95	
\f5\b Alerts:
\f4\b0  purchase failures >10% in 15 min \uc0\u8594  Slack ping.\
	\'95	
\f5\b Feature flags:
\f4\b0  enable/disable purchase automation per venue.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\fs24 \cf0 \
\uc0\u11835 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs28 \cf4 \

\f3\b\fs34 13) Week-1 Build Plan (for GPT-assisted team)
\f4\b0\fs28 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Day 1
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Scaffold repos; Docker (Postgres, Redis).\
	\'95	Implement 
\f6 /shows
\f4  with 
\f5\b mock data
\f4\b0 , RN screens skeleton.\
	\'95	GPT task: generate Prisma schema + migrations.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Day 2
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Scrape 
\f5\b shows
\f4\b0  for target chain+city; normalize + cache.\
	\'95	RN: Browse screen wired to API.\
	\'95	GPT task: write Playwright show scraper + unit tests from sample HTML.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Day 3
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Implement 
\f5\b seat map
\f4\b0  capture via Playwright (network intercept) + normalization.\
	\'95	RN: SeatGrid component; selection state.\
	\'95	GPT task: create 
\f6 SeatMap
\f4  adapter + tests.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Day 4
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Stripe checkout (server + RN).\
	\'95	Webhook handler; order state model.\
	\'95	GPT task: generate safe Stripe handlers with idempotency keys.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Day 5
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	
\f5\b performPurchase
\f4\b0  automation (happy path) + refund on failure.\
	\'95	Confirmation screen.\
	\'95	GPT task: implement BullMQ worker; retries with backoff; circuit breaker.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Day 6
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	E2E tests with fixtures; error UX; Sentry/Crashlytics.\
	\'95	Load test seatmap route; caching.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 Day 7
\f4\b0 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Polish, docs, run 2\'963 supervised real bookings (or full test-mode).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\fs24 \cf0 \
\uc0\u11835 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs28 \cf4 \

\f3\b\fs34 14) Prompts for Engineering GPTs (copy/paste)
\f4\b0\fs28 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 A. Scraper (shows)
\f4\b0 \
\
\pard\tx860\tx1420\tx1980\tx2540\tx3100\tx3660\tx4220\tx4780\tx5340\tx5900\tx6460\tx7020\li300\sl324\slmult1\partightenfactor0
\cf4 You are a senior Node/Playwright engineer. Implement 
\f6 scrapeShows(city,dateISO)
\f4  for CHAIN_X. Input: city string (slug used by the site) and ISO date. Output: normalized 
\f6 Show[]
\f4  as per 
\f6 types.ts
\f4 . Requirements: headless Chromium, custom user agent, retry 3 times with jitter, block tracking domains, respect 1\'962s random delays between requests, and write unit tests using fixtures from 
\f6 /fixtures/chainX/shows.html
\f4 . Do not hardcode CSS selectors; wrap them in a helper that supports fallback selectors. Return only shows with start times within the requested date. Write code and tests.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 B. Seat Map
\f4\b0 \
\
\pard\tx860\tx1420\tx1980\tx2540\tx3100\tx3660\tx4220\tx4780\tx5340\tx5900\tx6460\tx7020\li300\sl324\slmult1\partightenfactor0
\cf4 Implement 
\f6 fetchSeatMap(upstreamUrl)
\f4  using Playwright. Capture JSON from the network call that contains seats. Normalize to 
\f6 SeatMap
\f4 . Add a validator that ensures no duplicate seat codes and row/col bounds are consistent. Include unit tests with sample JSON fixtures and a degenerate case (missing row labels) where you synthesize row labels (A,B,C\'85).\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 C. Checkout & Payments
\f4\b0 \
\
\pard\tx860\tx1420\tx1980\tx2540\tx3100\tx3660\tx4220\tx4780\tx5340\tx5900\tx6460\tx7020\li300\sl324\slmult1\partightenfactor0
\cf4 Implement 
\f6 /checkout
\f4  and 
\f6 /confirm
\f4  routes (Fastify). Compute server-side totals from DB. Create Stripe PaymentIntent with automatic payment methods, attach 
\f6 orderId
\f4  metadata, store PI id. Add idempotency (hash of showId+seats+email). Implement 
\f6 /webhooks/stripe
\f4  to transition Order state on 
\f6 payment_intent.succeeded|payment_failed
\f4 . Add tests using stripe-mock.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 D. Purchase Worker
\f4\b0 \
\
\pard\tx860\tx1420\tx1980\tx2540\tx3100\tx3660\tx4220\tx4780\tx5340\tx5900\tx6460\tx7020\li300\sl324\slmult1\partightenfactor0
\cf4 Implement BullMQ worker 
\f6 purchase:execute
\f4 . Steps: load order, fetch fresh seat map, verify availability of requested seats, launch Playwright to perform the purchase (wrap in a persistence-safe session), parse confirmation id, update order. On any failure, attempt to cancel/refund PI and mark order failed with reason. Expose Prometheus counters. Include exponential backoff/retries up to 3.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f5\b \cf4 E. React Native
\f4\b0 \
\
\pard\tx860\tx1420\tx1980\tx2540\tx3100\tx3660\tx4220\tx4780\tx5340\tx5900\tx6460\tx7020\li300\sl324\slmult1\partightenfactor0
\cf4 Build Browse, SeatMap, Checkout, Confirmation screens. Use 
\f6 SeatGrid.tsx
\f4 . For Checkout, integrate Stripe RN SDK with CardField. On success, poll 
\f6 /orders/:id
\f4  until 
\f6 purchased
\f4  or 
\f6 failed
\f4 . Add error toasts and a simple loading state.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\fs24 \cf0 \
\uc0\u11835 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs28 \cf4 \

\f3\b\fs34 15) Risk Mitigation (build-time)
\f4\b0\fs28 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	
\f5\b Scraper brittleness:
\f4\b0  selectors helper + fixtures + quick patch path.\
	\'95	
\f5\b Seat drift:
\f4\b0  revalidate seat availability immediately before purchase.\
	\'95	
\f5\b Payment/purchase race:
\f4\b0  pre-create PI; only capture upon confirmed purchase\'97or capture then auto-refund on failure (MVP).\
	\'95	
\f5\b Vendor block:
\f4\b0  cap RPS to \uc0\u8804 0.2; backoff; cache seat maps for \u8804 60s; stop on 403/robots.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\fs24 \cf0 \
\uc0\u11835 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs28 \cf4 \

\f3\b\fs34 16) Handover Notes / Next
\f4\b0\fs28 \
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\sb240\partightenfactor0
\cf4 	\'95	Keep all chain-specific logic under 
\f6 /scrapers/chainX/*
\f4  to swap providers later.\
	\'95	Instrument everything; we\'92ll decide fee introduction and split-pay (MVP-2) based on data.\
	\'95	Prepare a \'93demo mode\'94 (fixtures only) to show flows without live scraping.\
}